____________________________________________________________________________________________________________________________________________________________________________________________

N1

Используя наследование, один класс может приобретать свойства других. Рассмотрим следующий класс Animal:

====================================================================================================================================================


class Animal{
    void walk(){
        System.out.println("I am walking");
    }
}

====================================================================================================================================================


Этот класс имеет только один метод, walk. Далее мы хотим создать класс Bird, который также имеет метод fly. Мы делаем это, используя ключевое слово extends:

====================================================================================================================================================


class Bird extends Animal {
    void fly() {
        System.out.println("I am flying");
    }
}

====================================================================================================================================================


Наконец, мы можем создать объект Bird, который может и летать, и ходить.

====================================================================================================================================================


public class Solution{
   public static void main(String[] args){

      Bird bird = new Bird();
      bird.walk();
      bird.fly();
   }
}

====================================================================================================================================================


Приведенный выше код напечатает:

I am walking
I am flying

Это означает, что объект Bird обладает всеми свойствами объекта Animal, а также некоторыми дополнительными уникальными свойствами.

Приведенный выше код предоставляется вам в вашем редакторе. ******  Вы должны добавить метод sing в класс Bird, а затем соответствующим образом изменить основной метод, чтобы код печатал следующие строки:

I am walking
I am flying
I am singing


=========================================================================================================================================================

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Animal{
	void walk(){
		System.out.println("I am walking");
	}
}

class Bird extends Animal{
	void fly(){
		System.out.println("I am flying");
	}
}

public class Solution{

   public static void main(String args[]){

	  Bird bird = new Bird();
	  bird.walk();
	  bird.fly();
        bird.sing();
	
   }
}





____________________________________________________________________________________________________________________________________________________________________________________________




N2

Напишите следующий код:

Класс Arithmetic с методом add, который принимает 2 целые числа в качестве параметров и возвращает целое число, обозначающее их сумму.
Класс Adder, наследуемый от суперкласса Arithmetic.
Ваши классы не должны быть public.

***** Формат ввода

Вы не несете ответственности за чтение любого ввода со стандартного ввода; заблокированная заглушка кода проверит вашу отправку, вызвав метод add для объекта Adder и передав ему 2 целые параметры.

***** Выходной формат

Вы не несете ответственности за печать чего-либо на стандартный вывод. Ваш метод добавления должен возвращать сумму своих параметров.

***** Пример вывода

Основной метод в классе Solution выше должен вывести следующее:

Мой суперкласс: Арифметика
42 13 20


____________________________________________________________________________________________________________________________________________________________________________________________



